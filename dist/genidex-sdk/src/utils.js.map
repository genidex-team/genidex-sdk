{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { ethers, Provider, BigNumberish, toBigInt, formatUnits, ErrorDescription } from \"ethers\";\nimport { constants } from \"./constants\";\n\nexport class Utils{\n\n  /**\n   * Get on-chain balance of a user's ETH or ERC20 token.\n   * @param provider - Ethers provider instance\n   * @param userAddress - Address of the user\n   * @param tokenAddress - ETH_ADDRESS or ERC20 token address\n   * @returns Balance as bigint\n   */\n  async getNormBalance(\n    provider: Provider,\n    userAddress: string,\n    tokenAddress: string,\n    decimals: number\n  ): Promise<bigint> {\n    if (tokenAddress === constants.ETH_ADDRESS) {\n      // Native ETH balance\n      return await provider.getBalance(userAddress);\n    } else {\n      // ERC20 balance\n      const abi = [\"function balanceOf(address) view returns (uint256)\"];\n      const contract = new ethers.Contract(tokenAddress, abi, provider);\n      const rawBalance: bigint = await contract.balanceOf(userAddress);\n      const normBalance: bigint = this.toNormAmount(rawBalance, decimals);\n      return normBalance;\n    }\n  }\n\n  /**\n   * Convert token amount between different decimals.\n   *\n   * @param amount - Token amount in source decimals (as bigint or string).\n   * @param fromDecimals - Source decimals (e.g. 6 for USDC).\n   * @param toDecimals - Target decimals (e.g. 18 for normalized).\n   * @returns Converted amount as bigint.\n   */\n  convertDecimals(\n    amount: bigint | string | BigNumberish,\n    fromDecimals: number,\n    toDecimals: number\n  ): bigint {\n    const value = typeof amount === \"bigint\" ? amount : BigInt(amount);\n    if (fromDecimals === toDecimals) return value;\n    const diff = toDecimals - fromDecimals;\n    if (diff > 0) {\n      return value * 10n ** BigInt(diff); // scale up\n    } else {\n      return value / 10n ** BigInt(-diff); // scale down\n    }\n  }\n\n  /**\n   * Converts an amount from the token's original decimals to the standard 18 decimals.\n   *\n   * @param rawAmount - The original amount (can be bigint, string, or BigNumberish).\n   * @param tokenDecimals - The number of decimals the token uses (e.g., 6, 8, 18).\n   * @returns The normalized amount as a bigint, scaled to 18 decimals.\n   */\n  toNormAmount(\n    rawAmount: bigint | string | BigNumberish,\n    tokenDecimals: number\n  ): bigint {\n    return this.convertDecimals(rawAmount, tokenDecimals, 18);\n  }\n\n  /**\n   * Converts a normalized amount (18 decimals) back to the token's original decimals.\n   *\n   * @param normAmount - The normalized amount (can be bigint, string, or BigNumberish).\n   * @param tokenDecimals - The target decimals of the token.\n   * @returns The raw amount as a bigint, scaled to the token's decimals.\n   */\n  toRawAmount(\n    normAmount: bigint | string | BigNumberish,\n    tokenDecimals: number\n  ): bigint {\n    return this.convertDecimals(normAmount, 18, tokenDecimals);\n  }\n\n  /**\n   * Format a normalized amount (with 18 decimals) into a human-readable string with commas.\n   *\n   * @param normAmount - The normalized amount (as `string`, `number`, or `bigint`).\n   * @returns A formatted string with comma separators and fixed 18 decimal places.\n   *\n   * @example\n   * formatNormAmount(1234567890000000000000n)\n   * // => \"1,234.567890000000000000\"\n   */\n  formatNormAmount(normAmount: string | number | bigint): string {\n    const amount = typeof normAmount === 'bigint' ? normAmount : toBigInt(normAmount);\n    const formatted = formatUnits(amount, 18); // returns a string\n    let [intPart, decPart = ''] = formatted.split('.');\n    decPart = decPart.padEnd(18, '0').slice(0, 18);\n    intPart = intPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    return `${intPart}.${decPart}`;\n  }\n\n  jsonToString(obj: any){\n    return JSON.stringify(obj, (key, value) =>\n      typeof value === \"bigint\" ? value.toString() : value\n    );\n  }\n\n  bigintReplacer(key:any, value:any) {\n    return typeof value === \"bigint\" ? value.toString() : value;\n  }\n\n  errorDescriptionToString(error: ErrorDescription){\n    const errorFragment = error.fragment;\n    const paramNames = errorFragment.inputs.map(input => input.name);\n    const paramValues = error.args;\n\n    const paramPairs = paramNames.map((name, index) => {\n      const value = paramValues[index];\n      let displayValue;\n      if (typeof value === 'bigint') {\n        displayValue = value.toString();\n      } else if (typeof value === 'object') {\n        displayValue = JSON.stringify(value, this.bigintReplacer);\n      } else {\n        displayValue = String(value);\n      }\n      return `${name}: ${displayValue}`;\n    });\n\n    return `${error.name}(${paramPairs.join(', ')})`;\n  }\n\n  logError(error: any){\n    console.error(error);\n    const objError: any = {};\n    for (const key in error) {\n        objError[key] = error[key];\n    }\n    // console.error(objError);\n    if(error.invocation && error.invocation.message) console.error('call:', error.invocation.message);\n    if(error.reason) console.error('revert:', error.reason);\n  }\n\n}\n\nexport const utils = new Utils;"]}