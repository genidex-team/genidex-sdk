{"version":3,"file":"balances.js","sourceRoot":"","sources":["../../../../src/contracts/balances.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport {\n    BigNumberish, Contract,\n    Signer, TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse\n} from 'ethers';\nimport { GeniDex } from './genidex';\nimport { ERC20 } from './erc20';\nimport { utils } from '../utils';\nimport { GeniDexTransactionResponse } from '../types';\n\ntype depositEthParams = {\n    signer: Signer;\n    normAmount: BigNumberish;\n    overrides?: TransactionRequest;\n}\n\ntype withdrawEthParams = {\n    signer: Signer;\n    normAmount: BigNumberish;\n    overrides?: TransactionRequest;\n}\n\ntype depositTokenParams = {\n    signer: Signer;\n    tokenAddress: string;\n    normAmount: BigNumberish;\n    normApproveAmount: BigNumberish;\n    overrides?: TransactionRequest;\n}\n\ntype withdrawTokenParams = {\n    signer: Signer;\n    tokenAddress: string;\n    normAmount: BigNumberish;\n    overrides?: TransactionRequest;\n}\n\nexport class Balances {\n    genidex!: GeniDex;\n    contract: Contract;\n\n    constructor(_genidex: GeniDex) {\n        this.genidex = _genidex;\n        this.contract = this.genidex.contract;\n    }\n\n    /**\n     * Deposit native ETH into the DEX contract.\n     *\n     * This sends a payable transaction to the contract's `depositEth()` function.\n     * The ETH value must be greater than zero, and will be stored in the user's balance.\n     *\n     * @param normAmount - The amount of ETH to deposit, in wei (as bigint or string).\n     * @returns Promise that resolves once the transaction is confirmed.\n     */\n    async depositEth({\n        signer,\n        normAmount,\n        overrides = {}\n    }: depositEthParams): Promise<GeniDexTransactionResponse | undefined> {\n        if (!normAmount || BigInt(normAmount) <= 0n) {\n            throw new Error(\"normAmount must be > 0\");\n        }\n        const value = BigInt(normAmount);\n        if (value <= 0n) {\n            throw new Error(\"ETH amount must be greater than zero\");\n        }\n\n        const tx = await this.genidex.writeContract({\n            signer,\n            method: \"depositEth\",\n            overrides: {\n                ...overrides,\n                value,\n            }\n        });\n        return tx;\n    }\n\n    /**\n     * Withdraw native ETH from the DEX contract to the user's wallet.\n     *\n     * This sends a transaction to the contract's `withdrawEth(uint256)` function.\n     * The contract should transfer ETH back to msg.sender if they have sufficient balance.\n     *\n     * @param normAmount - The amount of ETH to withdraw, in wei (bigint or compatible BigNumberish).\n     * @returns Promise that resolves once the transaction is confirmed.\n     */\n    async withdrawEth(\n        {signer, normAmount, overrides = {}}: withdrawEthParams\n    ): Promise<GeniDexTransactionResponse | undefined> {\n        if (BigInt(normAmount) <= 0n) {\n            throw new Error(\"Withdrawal amount must be greater than zero\");\n        }\n        const args = [\n            normAmount\n        ];\n        return await this.genidex.writeContract({\n            signer,\n            method: \"withdrawEth\",\n            args,\n            overrides\n        });\n    }\n\n    /**\n     * Deposits a specified ERC20 token into the GeniDex contract using a normalized amount with 18 decimals.\n     *\n     * @param signer - The Signer instance used to sign the transaction.\n     * @param tokenAddress - The address of the ERC20 token to deposit.\n     * @param normAmount - The deposit amount, normalized to 18 decimals (as bigint or string).\n     * @param normApproveAmount - The amount to approve for transfer, also in 18 decimals.\n     * @returns A Promise that resolves to the transaction response if the deposit is initiated, or undefined otherwise.\n     */\n    async depositToken({\n        signer,\n        tokenAddress,\n        normAmount,\n        normApproveAmount,\n        overrides = {}\n    }: depositTokenParams\n    ): Promise<TransactionResponse | TransactionReceipt | undefined | null>{\n        if (!normAmount || BigInt(normAmount) <= 0n) {\n            throw new Error(\"normAmount must be > 0\");\n        }\n        const erc20 = new ERC20(tokenAddress, this.genidex.provider);\n        const token = await this.genidex.tokens.getTokenInfo(tokenAddress);\n        const {decimals} = token;\n        const rawAmount = utils.toRawAmount(normAmount, decimals);\n        // Approve if needed\n        const rawAllowance = await erc20.allowance(signer.getAddress(), this.genidex.address);\n\n        if (rawAllowance < rawAmount) {\n            const rawApproveAmount = utils.toRawAmount(normApproveAmount, decimals);\n            await erc20.approve(signer, this.genidex.address, rawApproveAmount);\n        }\n        // Call depositToken(normalizedAmount)\n        const args = [\n            tokenAddress,\n            normAmount\n        ];\n        return await this.genidex.writeContract({\n            signer,\n            method: \"depositToken\",\n            args,\n            overrides\n        });\n    }\n\n    /**\n     * Calls the withdrawToken function from the GeniDex contract.\n     *\n     * @param signer - Signer to send the transaction\n     * @param tokenAddress - Address of the token to withdraw\n     * @param normAmount - Amount in normalized (18-decimal) format\n     */\n    async withdrawToken({\n        signer,\n        tokenAddress,\n        normAmount,\n        overrides = {}\n    }: withdrawTokenParams\n    ): Promise<TransactionResponse | TransactionReceipt | undefined | null> {\n\n        const args = [\n            tokenAddress,\n            normAmount\n        ];\n        const method = 'withdrawToken';\n        return await this.genidex.writeContract({signer, method, args, overrides });\n    }\n\n    /**\n     * Get the balance of accountAddress on GeniDex.\n     *\n     * @param accountAddress\n     * @param tokenOrEtherAddress - Token address or ETH_ADDRESS (0x0).\n     * @returns Promise resolving to the deposited balance (as bigint), normalized to 18 decimals.\n     */\n    async getBalance(accountAddress: string, tokenOrEtherAddress: string): Promise<bigint> {\n        const args = [accountAddress, tokenOrEtherAddress];\n        const normAmount = await this.genidex.readContract('balances', args);\n        return normAmount;\n    }\n}"]}