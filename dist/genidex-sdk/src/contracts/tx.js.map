{"version":3,"file":"tx.js","sourceRoot":"","sources":["../../../../src/contracts/tx.ts"],"names":[],"mappings":"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","sourcesContent":["import { Contract, Overrides, ErrorDescription, Interface, JsonRpcProvider, TransactionDescription, TransactionReceipt, TransactionResponse, LogDescription, Log } from \"ethers\";\nimport { GeniDex } from \"./genidex\";\nimport { WaitOpts } from \"../types\";\nimport { utils } from \"../utils\";\n\nexport class Tx {\n    genidex!: GeniDex;\n    contract: Contract;\n    abi: any;\n    iface: Interface;\n\n    constructor(_genidex: GeniDex) {\n        this.genidex = _genidex;\n        this.abi = this.genidex.abi;\n        this.contract = this.genidex.contract;\n        this.iface = new Interface(this.abi);\n    }\n\n    async wait(txHash: string | undefined, opts: WaitOpts = {}): Promise<TransactionReceipt | undefined>{\n        let {\n            confirmations = 1,\n            timeoutMs = 120_000,\n            pollMs = 1_000,\n            onProgress\n        } = opts;\n        const provider = this.genidex.provider;\n        if(!txHash) return;\n        const tx = await provider.getTransaction(txHash);\n        // console.log(tx)\n        if (!tx) {\n            throw new Error(`Transaction not found: ${txHash}`);\n        }\n        // log(decode)\n        while (true) {\n            const receipt = await provider.getTransactionReceipt(tx.hash);\n            // log(receipt);\n            if(receipt){\n                if (receipt.status === 0) {\n                    await this.handleFailedTx(tx, receipt);\n                }\n                const currentBlock = await provider.getBlockNumber();\n                const confNow = currentBlock - receipt.blockNumber + 1;\n                // Enough confirmations?  âžœ  resolve with the receipt\n                if (confNow >= confirmations) return receipt;\n            }\n            // Detect dropped / replaced transactions\n            const mempoolTx = await provider.getTransaction(tx.hash);\n            if (!mempoolTx && !receipt) {\n                const error = new Error(\"Transaction was dropped or replaced without a receipt\") as any;\n                error.code = \"TRANSACTION_REPLACED\";\n                error.tx = tx;\n                const decodedTx = this.decodeTx(tx);\n                if(decodedTx){\n                    error.invocation = {\n                        method: decodedTx.name,\n                        signature: decodedTx.signature,\n                        args: decodedTx.args,\n                        // overrides: this.extractOverrides(tx),\n                        message: utils.errorDescriptionToString(decodedTx)\n                    }\n                }\n                throw error;\n                // const newTx = await this.findTxByNonce(tx.from, tx.nonce);\n                // if(newTx){\n                //     let newReceipt = await this.wait(newTx.hash);\n                //     (newReceipt as any).firstHash = tx.hash;\n                //     return newReceipt;\n                // }\n            }\n            await new Promise((r) => setTimeout(r, pollMs));\n            if(pollMs < 60_000){\n                pollMs += pollMs*2;\n            }\n            // log(pollMs);\n        }\n    }\n\n    async findTxByNonce(address: string, nonce: number): Promise<TransactionResponse|undefined> {\n        const provider = this.genidex.provider as JsonRpcProvider;\n        const latest = await provider.getBlockNumber();\n        const minBlock = latest - 5;\n\n        for (let i = latest; i >= minBlock; i--) {\n            const block = await provider.getBlock(i, true);\n            const tx = block?.prefetchedTransactions.find(\n                (tx) => tx.from.toLowerCase() === address.toLowerCase() && tx.nonce === nonce\n            );\n            if (tx) {\n                // console.log(\"Found:\", tx.hash);\n                return tx;\n            }\n        }\n        // console.log(\"Transaction not found\");\n    }\n\n    async handleFailedTx(tx: TransactionResponse, receipt: TransactionReceipt){\n        const provider = this.genidex.provider;\n        const decodedTx = this.decodeTx(tx);\n        try{\n            await provider.call({\n                ...tx,\n                blockTag: receipt.blockNumber\n            });\n        }catch(error: any){\n            error.tx = tx;\n            error.receipt = receipt;\n            // await this.revertError(error, functionName, args);\n            const decodedError = this.decodeError(error);\n            // log(decodedError);\n            if(decodedError){\n                error.reason = utils.errorDescriptionToString(decodedError)\n                error.revert =  {\n                    name: decodedError.name,\n                    signature: decodedError.signature,\n                    args: decodedError.args,\n                    message: utils.errorDescriptionToString(decodedError)\n                }\n            }\n            // console.log(decodedTx);\n            if(decodedTx){\n                error.invocation = {\n                    method: decodedTx.name,\n                    signature: decodedTx.signature,\n                    args: decodedTx.args,\n                    // overrides: this.extractOverrides(tx),\n                    message: utils.errorDescriptionToString(decodedTx)\n                }\n\n            }\n            throw error\n        }\n    }\n\n    decodeTx(tx: TransactionResponse): TransactionDescription{\n        // if(!tx) return;\n        const decoded = this.iface.parseTransaction({\n            data: tx.data,\n            value: tx.value,\n        });\n        if (!decoded) {\n            throw new Error(\"Failed to decode transaction.\");\n        }\n        return decoded;\n    }\n\n    decodeLogs(logs: readonly Log[]){\n        const decodedEvents = [];\n        for (const log of logs) {\n            try {\n                const parsed = this.iface.parseLog(log);\n                if(!parsed) return;\n                decodedEvents.push({\n                    name: parsed.name,\n                    signature: parsed.signature,\n                    args: parsed.args,\n                    argsObject: this.argsLogToObject(parsed),\n                    logIndex: log.index,\n                    transactionHash: log.transactionHash,\n                    address: log.address,\n                });\n            } catch (e) {\n                continue;\n            }\n        }\n\n        return decodedEvents;\n    }\n\n    decodeError(error: any): ErrorDescription | null{\n        if(!error.data || error.data == '0x') return null;\n        // log(error);\n        const decoded = this.iface.parseError(error.data)\n        return decoded;\n    }\n\n    argsLogToObject(parsed: LogDescription): Record<string, any> {\n        const obj: Record<string, any> = {};\n\n        parsed.fragment.inputs.forEach((input, index) => {\n            const key = input.name && input.name.length ? input.name : index.toString();\n            obj[key] = parsed.args[index];\n        });\n\n        return obj;\n    }\n\n}"]}