{"version":3,"file":"markets.js","sourceRoot":"","sources":["../../../../src/contracts/markets.ts"],"names":[],"mappings":"AAOA,MAAM,OAAO,OAAO;IAIhB,YAAY,QAAiB;QACzB,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,aAAa;QACf,IAAG,CAAC;YACA,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;YACpE,MAAM,SAAS,GAA2B,EAAE,CAAC;YAC7C,KAAK,MAAM,CAAC,IAAI,UAAU,EAAE,CAAC;gBACzB,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;gBACnC,SAAS,CAAC,EAAE,CAAC,GAAG;oBACZ,MAAM,EAAE,CAAC,CAAC,MAAM;oBAChB,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;oBAC3B,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;oBACjC,eAAe,EAAE,MAAM,CAAC,CAAC,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;oBACrD,WAAW,EAAE,CAAC,CAAC,WAAW,CAAC,WAAW,EAAE;oBACxC,YAAY,EAAE,CAAC,CAAC,YAAY,CAAC,WAAW,EAAE;oBAC1C,OAAO,EAAE,CAAC,CAAC,OAAO;oBAClB,YAAY,EAAE,CAAC,CAAC,YAAY;iBAC/B,CAAC;YACN,CAAC;YACD,OAAO,SAAS,CAAC;QACrB,CAAC;QAAA,OAAM,KAAK,EAAC,CAAC;YACV,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;QAC3D,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,SAAS,CAAC,QAAsB;QAClC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;QACrE,OAAO;YACH,EAAE,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;YAC7B,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YACnC,eAAe,EAAE,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;YACvD,WAAW,EAAE,GAAG,CAAC,WAAW;YAC5B,YAAY,EAAE,GAAG,CAAC,YAAY;YAC9B,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,YAAY,EAAE,GAAG,CAAC,YAAY;SACjC,CAAC;IACN,CAAC;CAEJ","sourcesContent":["\nimport { BigNumberish, Contract, Signer, TransactionResponse } from 'ethers';\nimport { GeniDex } from './genidex';\nimport { ERC20 } from './erc20';\nimport { utils } from '../utils';\nimport { Market } from '../types';\n\nexport class Markets {\n    genidex!: GeniDex;\n    contract: Contract;\n\n    constructor(_genidex: GeniDex) {\n        this.genidex = _genidex;\n        this.contract = this.genidex.contract;\n    }\n\n    /**\n     * Fetch all existing markets and return them as an object indexed by market ID.\n     * @returns A Promise resolving to a record of markets keyed by market ID.\n     */\n    async getAllMarkets(): Promise<Record<string, Market> | undefined> {\n        try{\n            const rawMarkets = await this.genidex.readContract('getAllMarkets');\n            const marketMap: Record<string, Market> = {};\n            for (const m of rawMarkets) {\n                const id = BigInt(m.id).toString();\n                marketMap[id] = {\n                    symbol: m.symbol,\n                    id: BigInt(m.id.toString()),\n                    price: BigInt(m.price.toString()),\n                    lastUpdatePrice: BigInt(m.lastUpdatePrice.toString()),\n                    baseAddress: m.baseAddress.toLowerCase(),\n                    quoteAddress: m.quoteAddress.toLowerCase(),\n                    creator: m.creator,\n                    isRewardable: m.isRewardable,\n                };\n            }\n            return marketMap;\n        }catch(error){\n            await this.genidex.revertError(error, 'getAllMarkets');\n        }\n    }\n\n    /**\n     * Fetch a single market by ID from the GeniDex contract.\n     *\n     * @param marketId - The ID of the market to fetch.\n     * @returns A Promise resolving to a Market object.\n     */\n    async getMarket(marketId: BigNumberish): Promise<Market> {\n        const raw = await this.genidex.readContract('getMarket', [marketId]);\n        return {\n            id: BigInt(raw.id.toString()),\n            symbol: raw.symbol,\n            price: BigInt(raw.price.toString()),\n            lastUpdatePrice: BigInt(raw.lastUpdatePrice.toString()),\n            baseAddress: raw.baseAddress,\n            quoteAddress: raw.quoteAddress,\n            creator: raw.creator,\n            isRewardable: raw.isRewardable\n        };\n    }\n\n}"]}