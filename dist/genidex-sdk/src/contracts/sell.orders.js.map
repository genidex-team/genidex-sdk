{"version":3,"file":"sell.orders.js","sourceRoot":"","sources":["../../../../src/contracts/sell.orders.ts"],"names":[],"mappings":"AACA,OAAO,EAAuD,WAAW,EAAE,MAAM,QAAQ,CAAC;AAI1F,MAAM,OAAO,UAAU;IAInB,YAAY,QAAiB;QACzB,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;IAC1C,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACH,KAAK,CAAC,cAAc,CAAC,EACjB,MAAM,EACN,QAAQ,EACR,SAAS,EACT,YAAY,EACZ,QAAQ,GAAG,WAAW,EACtB,SAAS,GAAG,EAAE,EACJ;QACV,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;QACzC,MAAM,WAAW,GAAG,MAAM,SAAS,CAAC,sBAAsB,CAAC,QAAQ,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;QAC9F,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACvE,2BAA2B;QAC3B,MAAM,IAAI,GAAG;YACT,QAAQ;YACR,SAAS;YACT,YAAY;YACZ,iBAAiB;YACjB,WAAW;YACX,QAAQ;SACX,CAAA;QACD,MAAM,MAAM,GAAG,gBAAgB,CAAC;QAChC,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAC,CAAC,CAAC;IAC/E,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,eAAe,CAAC,EAClB,MAAM,EACN,QAAQ,EACR,UAAU,EACV,SAAS,GAAG,EAAE,EACE;QAChB,MAAM,IAAI,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QACpC,MAAM,MAAM,GAAG,iBAAiB,CAAC;QACjC,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAC,CAAC,CAAC;IAC/E,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,QAAsB,EAAE,QAAoB,IAAI;QACxE,MAAM,SAAS,GAAG,CAAC,CAAC,CAAA,kBAAkB;QACtC,MAAM,MAAM,GAAa,MAAM,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC5F,0BAA0B;QAC1B,OAAO,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,uBAAuB,CAAC,QAAsB;QAChD,+EAA+E;QAC/E,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QACtE,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC;QACrE,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC;QACrD,OAAO,iBAAiB,IAAI,EAAE,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,QAAsB;QACzC,MAAM,SAAS,GAAG,EAAE,CAAC;QACrB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QAC7D,MAAM,QAAQ,GAAG,IAAI,CAAC;QACtB,IAAI,MAAM,GAAG,CAAC,CAAC;QAEf,MAAM,SAAS,GAAG,CAAC,CAAC,CAAA,kBAAkB;QACtC,OAAO,MAAM,GAAG,WAAW,EAAE,CAAC;YAC1B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;YACrF,MAAM,IAAI,QAAQ,CAAC;YACnB,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QAC5B,CAAC;QACD,oBAAoB;QACpB,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,KAAa,EAAE,EAAE,CAAC,CAAC;YAC7C,EAAE,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YAC5B,MAAM,EAAE,CAAC,CAAC,MAAM;YAChB,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YACjC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;SAC1C,CAAC,CAAC,CAAC;IACR,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,QAAsB;QAC5C,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC7E,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,aAAa,CAAC,QAAsB,EAAE,QAAsB;QAC9D,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,gCAAgC,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC5F,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC;YAC9B,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;YAC3B,MAAM,EAAE,CAAC,CAAC,MAAM;YAChB,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YACjC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;SAC1C,CAAC,CAAC,CAAC;IACR,CAAC;IAED;;;;OAIG;IACH,cAAc,CAAC,MAAqB;QAChC,OAAO,CAAC,GAAG,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC7B,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK;gBAAE,OAAO,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK;gBAAE,OAAO,CAAC,CAAC;YAChC,OAAO,CAAC,CAAC;QACb,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,uBAAuB,CACzB,QAAsB,EACtB,SAAuB,EACvB,YAA0B;QAE1B,MAAM,UAAU,GAAkB,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAChF,MAAM,gBAAgB,GAAkB,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QACxE,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;QACtF,OAAO,YAAY,CAAC;IACxB,CAAC;CAEJ","sourcesContent":["\nimport { BigNumberish, Contract, Signer, TransactionResponse, ZeroAddress } from 'ethers';\nimport { GeniDex } from './genidex';\nimport { OutputOrder, cancelOrderParams, orderParams } from '../types';\n\nexport class SellOrders {\n    genidex!: GeniDex;\n    contract: Contract;\n\n    constructor(_genidex: GeniDex) {\n        this.genidex = _genidex;\n        this.contract = this.genidex.contract;\n    }\n\n    /**\n     * Place a sell order on the specified market.\n     *\n     * This function:\n     * 1. Fetches matching buy order IDs based on price and quantity.\n     * 2. Randomly selects a filled sell order ID if applicable.\n     * 3. Sends a `placeSellOrder` transaction with the required parameters.\n     *\n     * @param params - Object containing order parameters.\n     * @param params.signer - Signer used to send the transaction.\n     * @param params.marketId - ID of the market (e.g. 1).\n     * @param params.normPrice - Price per unit (normalized to 18 decimals).\n     * @param params.normQuantity - Quantity to sell (base token, 18 decimals).\n     * @param params.referrer - Address of the referrer, or zero address.\n     * @returns TransactionResponse.\n     */\n    async placeSellOrder({\n        signer,\n        marketId,\n        normPrice,\n        normQuantity,\n        referrer = ZeroAddress,\n        overrides = {}\n    }: orderParams): Promise<TransactionResponse|undefined> {\n        const buyOrders = this.genidex.buyOrders;\n        const buyOrderIds = await buyOrders.getMatchingBuyOrderIds(marketId, normPrice, normQuantity);\n        const filledSellOrderId = await this.randomFilledSellOrderID(marketId);\n        // console.log(sellOrders);\n        const args = [\n            marketId,\n            normPrice,\n            normQuantity,\n            filledSellOrderId,\n            buyOrderIds,\n            referrer\n        ]\n        const method = 'placeSellOrder';\n        return await this.genidex.writeContract({signer, method, args, overrides});\n    }\n\n    /**\n     * Cancel a sell order on the specified market.\n     *\n     * @param signer - The signer (wallet) performing the cancellation.\n     * @param marketId - The ID of the market where the sell order exists.\n     * @param orderIndex - The index of the sell order to cancel.\n     * @returns The transaction response object.\n     */\n    async cancelSellOrder({\n        signer,\n        marketId,\n        orderIndex,\n        overrides = {}\n    }: cancelOrderParams): Promise<TransactionResponse | undefined> {\n        const args = [marketId, orderIndex];\n        const method = 'cancelSellOrder';\n        return await this.genidex.writeContract({signer, method, args, overrides});\n    }\n\n    async getFilledSellOrderIds(marketId: BigNumberish, limit: BigNumberish=1000) {\n        const typeOrder = 1;// buy: 0, sell: 1\n        const rawIds: bigint[] = await this.contract[\"getFilledOrders\"](typeOrder, marketId, limit);\n        // console.log(rawOrders);\n        return rawIds.map(id => BigInt(id.toString()));\n    }\n\n    /**\n     * Returns a random ID of a buy order that has been fully filled (quantity == 0).\n     *\n     * @param marketId - ID of the market\n     * @returns Random filled order ID (bigint) or null if none found\n     */\n    async randomFilledSellOrderID(marketId: BigNumberish): Promise<bigint | null> {\n        // const filledSellOrderIDs = this.genidex.getFilledOrderIDs(marketSellOrders);\n        const filledSellOrderIDs = await this.getFilledSellOrderIds(marketId);\n        const random = Math.floor(Math.random() * filledSellOrderIDs.length);\n        const filledSellOrderId = filledSellOrderIDs[random];\n        return filledSellOrderId || 0n;\n    }\n\n    async getAllSellOrders(marketId: BigNumberish){\n        const rawOrders = [];\n        const ordersTotal = await this.getSellOrdersLength(marketId);\n        const pageSize = 3700;\n        let offset = 0;\n\n        const typeOrder = 1;// buy: 0, sell: 1\n        while (offset < ordersTotal) {\n            const page = await this.contract[\"getOrders\"](typeOrder, marketId, offset, pageSize);\n            offset += pageSize;\n            rawOrders.push(...page);\n        }\n        // return allOrders;\n        return rawOrders.map((o: any, index: number) => ({\n            id: BigInt(index.toString()),\n            trader: o.trader,\n            price: BigInt(o.price.toString()),\n            quantity: BigInt(o.quantity.toString()),\n        }));\n    }\n\n    async getSellOrdersLength(marketId: BigNumberish): Promise<bigint> {\n        const sellOrderLength = await this.contract[\"getSellOrdersLength\"](marketId);\n        return sellOrderLength;\n    }\n\n    /**\n     * Fetch list of sell orders for a market with price <= maxPrice.\n     *\n     * @param marketId - ID of the market\n     * @param maxPrice - Max acceptable price (normalized to 18 decimals)\n     * @returns Array of matching OutputOrder objects\n     */\n    async getSellOrders(marketId: BigNumberish, maxPrice: BigNumberish): Promise<OutputOrder[]> {\n        const rawOrders = await this.contract[\"getSellOrders(uint256,uint256)\"](marketId, maxPrice);\n        return rawOrders.map((o: any) => ({\n            id: BigInt(o.id.toString()),\n            trader: o.trader,\n            price: BigInt(o.price.toString()),\n            quantity: BigInt(o.quantity.toString()),\n        }));\n    }\n\n    /**\n     * Sorts an array of sell orders by price ascending (low to high).\n     * @param orders - Array of sell orders\n     * @returns Sorted array\n     */\n    sortSellOrders(orders: OutputOrder[]): OutputOrder[] {\n        return [...orders].sort((a, b) => {\n            if (a.price < b.price) return -1;\n            if (a.price > b.price) return 1;\n            return 0;\n        });\n    }\n\n    /**\n     * Get a list of sell order IDs that can match a buy order based on price and quantity.\n     * @param marketId - The ID of the market to query.\n     * @param normPrice - The maximum buy price (normalized to 18 decimals).\n     * @param normQuantity - The desired buy quantity (normalized to 18 decimals).\n     * @returns An array of matching sell order IDs, ordered by best price.\n     */\n    async getMatchingSellOrderIds(\n        marketId: BigNumberish,\n        normPrice: BigNumberish,\n        normQuantity: BigNumberish\n    ){\n        const sellOrders: OutputOrder[] = await this.getSellOrders(marketId, normPrice);\n        const sortedSellOrders: OutputOrder[] = this.sortSellOrders(sellOrders);\n        const sellOrderIds = this.genidex.getMatchingOrderIds(sortedSellOrders, normQuantity);\n        return sellOrderIds;\n    }\n\n}"]}