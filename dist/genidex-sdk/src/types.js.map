{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/types.ts"],"names":[],"mappings":"AAGA,MAAM,CAAN,IAAY,WAiBX;AAjBD,WAAY,WAAW;IACrB,oCAAsB,CAAA;IACtB,oCAAsB,CAAA;IACtB,oCAAsB,CAAA;IACtB,4BAAkB,CAAA;IAClB,oBAAoB;IACpB,uBAAuB;IACvB,2BAA2B;IAE3B,UAAU;IACV,yCAA2B,CAAA;IAC3B,uCAA0B,CAAA;IAC1B,2CAA4B,CAAA;IAC5B,kCAAuB,CAAA;IACvB,kCAAuB,CAAA;IACvB,sCAAyB,CAAA;IACzB,4BAAoB,CAAA;AACtB,CAAC,EAjBW,WAAW,KAAX,WAAW,QAiBtB;AAyBA,CAAC","sourcesContent":["import { AddressLike, BigNumberish, ContractTransactionReceipt, ContractTransactionResponse, Overrides, Signer, TransactionReceipt, TransactionRequest } from \"ethers\";\n\n\nexport enum NetworkName {\n  Ethereum  = \"ethereum\",\n  Optimism  = \"optimism\",\n  Arbitrum  = \"arbitrum\",\n  Base      = \"base\",\n  // BNBChain = \"bnb\",\n  // Polygon = \"polygon\",\n  // Avalanche = \"avalanche\",\n\n  // Testnet\n  ArbSepolia  = \"arb_sepolia\",\n  OpSepolia   = \"op_sepolia\",\n  BaseSepolia = \"base_sepolia\",\n  Sepolia     = \"sepolia\",\n  Hardhat     = \"hardhat\",\n  Localhost   = \"localhost\",\n  Geni        = \"geni\",\n}\n\nexport interface ContractAddresses {\n  GeniDex: string;\n  GeniToken: string | null;\n  GeniRewarder: string | null;\n}\n\nexport interface NetworkConfig {\n  chainId: bigint;\n  name: string;\n  contracts: ContractAddresses;\n}\n\nexport interface Networks {\n  [networkName: string]: NetworkConfig;\n}\n\nexport interface RawNetworkConfig {\n  chainId: number;\n  contracts: ContractAddresses;\n}\n\nexport interface RawNetworks {\n  [networkName: string]: RawNetworkConfig;\n};\n\nexport interface Market {\n  symbol: string;\n  id: bigint;\n  price: bigint;\n  lastUpdatePrice: bigint;\n  baseAddress: string;\n  quoteAddress: string;\n  creator: string;\n  isRewardable: boolean;\n}\n\nexport interface TokenInfo {\n  tokenAddress: string;\n  symbol: string;\n  usdMarketID: bigint;\n  decimals: number;\n  isUSD: boolean;\n}\n\nexport interface OutputOrder {\n  id: bigint;\n  trader: string;\n  price: bigint;\n  quantity: bigint;\n}\n\nexport interface orderParams{\n    signer: Signer;\n    marketId: BigNumberish;\n    normPrice: BigNumberish;\n    normQuantity: BigNumberish;\n    referrer?: AddressLike;\n    overrides?: Overrides;\n}\nexport interface  cancelOrderParams {\n  signer: Signer,\n  marketId: BigNumberish,\n  orderIndex: BigNumberish,\n  overrides?: Overrides\n}\n\nexport interface GeniDexTransactionResponse extends ContractTransactionResponse {\n  waitForConfirms(): Promise<TransactionReceipt | undefined>;\n}\n\nexport interface WaitOpts {\n  confirmations?: number;\n  timeoutMs?: number;\n  pollMs?: number;\n  onProgress?: (currentConf: number) => void;\n}"]}