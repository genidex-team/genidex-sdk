{"version":3,"file":"markets.t.js","sourceRoot":"","sources":["../../../test/markets.t.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAe,MAAM,cAAc,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,IAAI,OAAO,GAAI,IAAI,OAAO,EAAE,CAAC;AAE7B,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IACzB,SAAS,CAAC,KAAK,IAAG,EAAE;QAChB,MAAM,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,QAAQ,GAAG,GAAG,CAAC;QACrB,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACzD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;QACnB,IAAI,EACA,EAAE,EAAE,MAAM,EAAE,eAAe,EAAE,KAAK,EAClC,WAAW,EAAE,YAAY,EAAE,OAAO,EAAE,YAAY,EACnD,GAAG,MAAM,CAAC;QAEX,MAAM,CAAC,OAAO,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAErC,KAAK;QACL,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAE,MAAM,CAAC,QAAQ,CAAC,CAAE,CAAC;QAEpC,SAAS;QACT,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAE5B,cAAc;QACd,MAAM,CAAC,OAAO,WAAW,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACjC,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAEjD,eAAe;QACf,MAAM,CAAC,OAAO,YAAY,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3C,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAClC,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["\nimport { GeniDex, NetworkName } from \"../src/index\";\nimport { ethers } from \"ethers\";\nimport { config } from \"./config\";\n\nlet genidex  = new GeniDex();\n\ndescribe(\"getMarket()\", () => {\n    beforeAll(async() => {\n        await genidex.connect(config.networkName, config.provider);\n    });\n\n    test(\"should return a market object with expected properties\", async () => {\n        const marketId = \"1\";\n        const market = await genidex.markets.getMarket(marketId);\n        console.log(market)\n        let {\n            id, symbol, lastUpdatePrice, price,\n            baseAddress, quoteAddress, creator, isRewardable\n        } = market;\n\n        expect(typeof market).toBe(\"object\");\n\n        // id\n        expect(typeof id).toBe('bigint');\n        expect(id).toBe( BigInt(marketId) );\n\n        // symbol\n        expect(symbol).not.toBe('');\n\n        // baseAddress\n        expect(typeof baseAddress).toBe('string');\n        expect(baseAddress).not.toBe('');\n        expect(baseAddress).not.toBe(ethers.ZeroAddress);\n\n        // quoteAddress\n        expect(typeof quoteAddress).toBe('string');\n        expect(quoteAddress).not.toBe('');\n        expect(quoteAddress).not.toBe(ethers.ZeroAddress);\n    });\n});\n"]}