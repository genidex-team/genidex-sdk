{"version":3,"file":"balances.token.t.js","sourceRoot":"","sources":["../../../test/balances.token.t.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,OAAO,EAAe,MAAM,cAAc,CAAC;AACpD,OAAO,EAAE,MAAM,EAAqB,MAAM,QAAQ,CAAC;AACnD,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,IAAI,OAAO,GAAI,IAAI,OAAO,EAAE,CAAC;AAC7B,IAAI,MAAc,CAAC;AACnB,IAAI,aAAqB,CAAC;AAG1B,SAAS,CAAC,KAAK,IAAG,EAAE;IAChB,MAAM,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC3D,MAAM,GAAG,MAAM,MAAM,CAAC,SAAS,EAAE,CAAC;IAClC,aAAa,GAAG,MAAM,MAAM,CAAC,UAAU,EAAE,CAAC;AAC9C,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;IAElD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;IACnD,MAAM,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAE/B,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,EAAE,YAAY,CAAC,CAAA;IAC/E,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAE,CAAC;IAEtD,UAAU;IACV,MAAM,aAAa,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAC/C,MAAM,aAAa,GAAG,aAAa,CAAC;IACpC,MAAM,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC;QAChC,MAAM,EAAE,YAAY,EAAE,UAAU,EAAE,aAAa,EAAE,iBAAiB,EAAE,aAAa;KACpF,CAAC,CAAC;IAEH,gBAAgB;IAChB,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,EAAE,YAAY,CAAC,CAAA;IAC/E,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAE,CAAC;IACtD,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC,CAAA;IAE/C,WAAW;IACX,IAAG,QAAQ,GAAC,CAAC,EAAC,CAAC;QACX,qDAAqD;QACrD,MAAM,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAC,MAAM,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAAC,CAAC,CAAC;QAEnF,gBAAgB;QAChB,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,EAAE,YAAY,CAAC,CAAA;QAC/E,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAE,CAAC;QACtD,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;IAC7B,CAAC;AAGL,CAAC,CAAC,CAAC","sourcesContent":["\n\nimport { GeniDex, NetworkName } from \"../src/index\";\nimport { ethers, Signature, Signer } from \"ethers\";\nimport { config } from \"./config\";\n\nlet genidex  = new GeniDex();\nlet signer: Signer;\nlet signerAddress: string;\n\n\nbeforeAll(async() => {\n    await genidex.connect(config.networkName, config.provider);\n    signer = await config.getSigner();\n    signerAddress = await signer.getAddress();\n});\n\ntest(\"deposit, withdraw, getTokenBalance\", async () => {\n\n    const tokens = await genidex.tokens.getAllTokens();\n    const tokenAddress = tokens[0];\n\n    const balance1 = await genidex.balances.getBalance(signerAddress, tokenAddress)\n    console.log(\"Balance\", ethers.formatEther(balance1) );\n\n    // deposit\n    const depositAmount = ethers.parseEther(\"100\");\n    const approveAmount = depositAmount;\n    await genidex.balances.depositToken({\n        signer, tokenAddress, normAmount: depositAmount, normApproveAmount: approveAmount\n    });\n\n    // check balance\n    const balance2 = await genidex.balances.getBalance(signerAddress, tokenAddress)\n    console.log(\"Balance\", ethers.formatEther(balance2) );\n    expect(balance2).toBe(balance1 + depositAmount)\n\n    // withdraw\n    if(balance2>0){\n        // const withdrawalAmount = ethers.parseEther(\"100\");\n        await genidex.balances.withdrawToken({signer, tokenAddress, normAmount: balance2});\n\n        // check balance\n        const balance3 = await genidex.balances.getBalance(signerAddress, tokenAddress)\n        console.log(\"Balance\", ethers.formatEther(balance3) );\n        expect(balance3).toBe(0n)\n    }\n\n    \n});\n\n"]}