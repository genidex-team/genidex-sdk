{"version":3,"file":"balances.eth.t.js","sourceRoot":"","sources":["../../../test/balances.eth.t.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,OAAO,EAAe,SAAS,EAAE,MAAM,cAAc,CAAC;AAC/D,OAAO,EAAE,MAAM,EAAqB,MAAM,QAAQ,CAAC;AACnD,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,IAAI,OAAO,GAAI,IAAI,OAAO,EAAE,CAAC;AAC7B,IAAI,MAAc,CAAC;AACnB,IAAI,aAAqB,CAAC;AAC1B,MAAM,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;AAC1C,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;AAE/B,SAAS,CAAC,KAAK,IAAG,EAAE;IAChB,MAAM,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC3D,MAAM,GAAG,MAAM,MAAM,CAAC,SAAS,EAAE,CAAC;IAClC,aAAa,GAAG,MAAM,MAAM,CAAC,UAAU,EAAE,CAAC;AAC9C,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;IAElD,gBAAgB;IAChB,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,EAAE,WAAW,CAAC,CAAA;IAC9E,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAE,CAAC;IAErE,wDAAwD;IACxD,UAAU;IAEV,MAAM,QAAQ,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAChD,MAAM,aAAa,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAE7C,IAAG,CAAC;QACA,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAC,MAAM,EAAE,UAAU,EAAE,aAAa,EAAC,CAAC,CAAC;QAClF,IAAG,EAAE;YAAE,EAAE,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC,CAAC,OAAO,EAAC,EAAE;gBACxC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAA;IACN,CAAC;IAAA,OAAM,KAAK,EAAC,CAAC;QACV,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC;IAED,IAAI,CAAC;QACD,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAC,MAAM,EAAE,UAAU,EAAE,aAAa,EAAC,CAAC,CAAC;QACnF,IAAG,GAAG;YAAE,GAAG,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC,CAAC,OAAO,EAAC,EAAE;gBAC1C,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAA;IACN,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC;IAED,MAAM,QAAQ,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAE/C,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC9C,UAAU;IAEV,gBAAgB;IAChB,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,EAAE,WAAW,CAAC,CAAA;IAC9E,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAE,CAAC;IACpE,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC,CAAA;IAE/C,WAAW;IACX,IAAG,QAAQ,GAAC,CAAC,EAAC,CAAC;QACX,MAAM,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAC,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAC,CAAC,CAAC;QAEnE,gBAAgB;QAChB,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,EAAE,WAAW,CAAC,CAAA;QAC9E,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAE,CAAC;QACtD,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;IAC7B,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["\n\nimport { GeniDex, NetworkName, constants } from \"../src/index\";\nimport { ethers, Signature, Signer } from \"ethers\";\nimport { config } from \"./config\";\n\nlet genidex  = new GeniDex();\nlet signer: Signer;\nlet signerAddress: string;\nconst ETH_ADDRESS = constants.ETH_ADDRESS;\nlet provider = config.provider;\n\nbeforeAll(async() => {\n    await genidex.connect(config.networkName, config.provider);\n    signer = await config.getSigner();\n    signerAddress = await signer.getAddress();\n});\n\ntest(\"deposit, withdraw, getTokenBalance\", async () => {\n\n    // check balance\n    const balance1 = await genidex.balances.getBalance(signerAddress, ETH_ADDRESS)\n    console.log(\"Balance before deposit\", ethers.formatEther(balance1) );\n\n    // provider.send('anvil_setBlockTimestampInterval', 12);\n    // deposit\n\n    await provider.send(\"evm_setAutomine\", [false]);\n    const depositAmount = ethers.parseEther(\"1\");\n\n    try{\n        const tx = await genidex.balances.depositEth({signer, normAmount: depositAmount});\n        if(tx) tx.waitForConfirms().then((receipt)=>{\n            console.log(receipt?.hash);\n        })\n    }catch(error){\n        console.log(error);\n    }\n    \n    try {\n        const tx2 = await genidex.balances.depositEth({signer, normAmount: depositAmount});\n        if(tx2) tx2.waitForConfirms().then((receipt)=>{\n            console.log(receipt?.hash);\n        })\n    } catch (error) {\n        console.log(error);\n    }\n\n    await provider.send(\"evm_setAutomine\", [true]);\n\n    await new Promise((r) => setTimeout(r, 1000));\n    // return;\n\n    // check balance\n    const balance2 = await genidex.balances.getBalance(signerAddress, ETH_ADDRESS)\n    console.log(\"Balance after deposit\", ethers.formatEther(balance2) );\n    expect(balance2).toBe(balance1 + depositAmount)\n\n    // withdraw\n    if(balance2>0){\n        await genidex.balances.withdrawEth({signer, normAmount: balance2});\n\n        // check balance\n        const balance3 = await genidex.balances.getBalance(signerAddress, ETH_ADDRESS)\n        console.log(\"Balance\", ethers.formatEther(balance3) );\n        expect(balance3).toBe(0n)\n    }\n});\n\n"]}