{"version":3,"file":"place.buyorder.ex.js","sourceRoot":"","sources":["../../../examples/place.buyorder.ex.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAsB,MAAM,cAAc,CAAC;AAC3D,OAAO,EAAe,UAAU,EAAqB,MAAM,QAAQ,CAAC;AACpE,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AAGxC,IAAI,OAAO,GAAI,IAAI,OAAO,EAAE,CAAC;AAC7B,IAAI,MAAc,CAAC;AACnB,IAAI,aAAqB,CAAC;AAC1B,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;AAE/B,KAAK,UAAU,IAAI;IACf,MAAM,GAAG,MAAM,MAAM,CAAC,SAAS,EAAE,CAAC;IAClC,aAAa,GAAG,MAAM,MAAM,CAAC,UAAU,EAAE,CAAC;IAC1C,MAAM,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IACpD,MAAM,QAAQ,GAAG,CAAC,CAAC;IAEnB,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACzD,uBAAuB;IACvB,MAAM,EAAC,YAAY,EAAC,GAAG,MAAM,CAAC;IAE9B,MAAM,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC;QAChC,MAAM;QACN,YAAY,EAAE,YAAY;QAC1B,UAAU,EAAE,UAAU,CAAC,OAAO,CAAC;QAC/B,iBAAiB,EAAE,UAAU,CAAC,OAAO,CAAC;KACzC,CAAC,CAAC;IAEH,MAAM,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;IAClC,MAAM,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,CAAA;IACrC,MAAM,EAAE,GAAG,MAAM,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC;QAC7C,MAAM;QACN,QAAQ;QACR,SAAS;QACT,YAAY;KACf,CAAC,CAAA;IAEF,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IAChD,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;IACpC,8BAA8B;IAC9B,IAAG,OAAO,EAAC,CAAC;QACR,MAAM,IAAI,GAAG,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjD,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAA;IACvC,CAAC;AAEL,CAAC;AAED,IAAI,EAAE,CAAC","sourcesContent":["\nimport { GeniDex, NetworkName, utils } from \"../src/index\";\nimport { formatEther, parseEther, Signature, Signer } from \"ethers\";\nimport { config } from \"../test/config\";\nimport { error } from \"console\";\n\nlet genidex  = new GeniDex();\nlet signer: Signer;\nlet signerAddress: string;\nlet provider = config.provider;\n\nasync function main(){\n    signer = await config.getSigner();\n    signerAddress = await signer.getAddress();\n    await genidex.connect(config.networkName, provider);\n    const marketId = 1;\n\n    const market = await genidex.markets.getMarket(marketId);\n    // console.log(market);\n    const {quoteAddress} = market;\n\n    await genidex.balances.depositToken({\n        signer,\n        tokenAddress: quoteAddress,\n        normAmount: parseEther(\"10000\"),\n        normApproveAmount: parseEther(\"10000\")\n    });\n\n    const normPrice = parseEther(\"1\");\n    const normQuantity = parseEther(\"20\")\n    const tx = await genidex.buyOrders.placeBuyOrder({\n        signer,\n        marketId,\n        normPrice,\n        normQuantity\n    })\n\n    const receipt = await genidex.tx.wait(tx?.hash);\n    console.log('\\n\\nreceipt', receipt);\n    // console.log(receipt?.logs);\n    if(receipt){\n        const logs = genidex.tx.decodeLogs(receipt.logs);\n        console.log('\\n\\ndecodeLogs', logs)\n    }\n\n}\n\nmain();"]}