export const geniDexABI = [
  "constructor()",
  "error AddressAlreadyLinked()",
  "error AddressEmptyCode(address target)",
  "error AmountTooSmall(uint256 amount, uint256 minAmount)",
  "error DecimalsExceedLimit(uint8 decimals)",
  "error DecimalsFetchFailed()",
  "error ERC1967InvalidImplementation(address implementation)",
  "error ERC1967NonPayable()",
  "error EnforcedPause()",
  "error ExpectedPause()",
  "error FailedCall()",
  "error InsufficientBalance(uint256 available, uint256 required)",
  "error InsufficientPoints(uint256 available, uint256 required)",
  "error InvalidAddress()",
  "error InvalidInitialization()",
  "error InvalidMarketId(uint256 marketId, uint256 marketCounter)",
  "error InvalidProof()",
  "error ManualDecimalsRequired()",
  "error ManualSymbolRequired()",
  "error MarketAlreadyExists(address baseToken, address quoteToken)",
  "error NoTokensReceived()",
  "error NormalizationOverflow(uint256 amount, uint256 factor)",
  "error NotInitializing()",
  "error OnlyRewarderAllowed(address caller)",
  "error OrderAlreadyCanceled(uint256 orderIndex)",
  "error OwnableInvalidOwner(address owner)",
  "error OwnableUnauthorizedAccount(address account)",
  "error ReentrancyGuardReentrantCall()",
  "error ReferralRootNotSet()",
  "error ReferrerAlreadySet(address user)",
  "error SafeERC20FailedOperation(address token)",
  "error SelfReferralNotAllowed(address user)",
  "error SymbolFetchFailed()",
  "error TokenNotListed(address token)",
  "error TotalTooSmall(uint256 total, uint256 minimumRequired)",
  "error TransferFailed(address from, address to, uint256 amount)",
  "error TransferMismatch(uint256 actual, uint256 expected)",
  "error UUPSUnauthorizedCallContext()",
  "error UUPSUnsupportedProxiableUUID(bytes32 slot)",
  "error Unauthorized(uint80 caller, uint80 owner)",
  "error UserNotFound(address user)",
  "event Deposit(address indexed sender, address indexed token, uint256 amount)",
  "event FeeReceiverUpdated(address indexed oldAddress, address indexed newAddress)",
  "event GeniRewarderUpdated(address indexed previous, address indexed newRewarder)",
  "event Initialized(uint64 version)",
  "event OnCancelBuyOrder(address indexed trader, uint256 indexed marketId, uint256 orderIndex)",
  "event OnCancelSellOrder(address indexed trader, uint256 indexed marketId, uint256 orderIndex)",
  "event OnPlaceBuyOrder(uint256 indexed marketId, address indexed trader, uint256 orderIndex, uint256 price, uint256 quantity, uint256 remainingQuantity, uint256 lastPrice, address referrer, uint80 userID)",
  "event OnPlaceSellOrder(uint256 indexed marketId, address indexed trader, uint256 orderIndex, uint256 price, uint256 quantity, uint256 remainingQuantity, uint256 lastPrice, address referrer, uint80 userID)",
  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
  "event Paused(address account)",
  "event TokenListed(address indexed token, string symbol)",
  "event Unpaused(address account)",
  "event Upgraded(address indexed implementation)",
  "event Withdrawal(address indexed recipient, address indexed token, uint256 amount)",
  "function BASE_UNIT() view returns (uint256)",
  "function UPGRADE_INTERFACE_VERSION() view returns (string)",
  "function addMarket(address baseAddress, address quoteAddress)",
  "function balances(uint80 userID, address token) view returns (uint256 balance)",
  "function buyOrders(uint256, uint256) view returns (uint80 userID, uint80 price, uint80 quantity)",
  "function cancelBuyOrder(uint256 marketId, uint256 orderIndex)",
  "function cancelSellOrder(uint256 marketId, uint256 orderIndex)",
  "function deductUserPoints(address userAddress, uint256 pointsToDeduct)",
  "function depositEth() payable",
  "function depositToken(address tokenAddress, uint256 normalizedAmount)",
  "function generateMarketHash(address baseAddress, address quoteAddress) pure returns (bytes32)",
  "function geniRewarder() view returns (address)",
  "function getAllMarkets() view returns ((uint80 price, uint80 lastUpdatePrice, bool isRewardable, address baseAddress, address quoteAddress, address creator, uint256 id, string symbol)[])",
  "function getBalance(address account, address tokenOrEtherAddress) view returns (uint256)",
  "function getBuyOrdersLength(uint256 marketID) view returns (uint256)",
  "function getEthBalance() view returns (uint256)",
  "function getFilledOrders(uint8 orderType, uint256 marketID, uint256 limit) view returns (uint256[])",
  "function getMarket(uint256 id) view returns ((uint80 price, uint80 lastUpdatePrice, bool isRewardable, address baseAddress, address quoteAddress, address creator, uint256 id, string symbol))",
  "function getMarketID(address baseAddress, address quoteAddress) view returns (uint256)",
  "function getOrders(uint8 orderType, uint256 marketID, uint256 offset, uint256 limit) view returns ((uint256 id, address trader, uint80 userID, uint80 price, uint80 quantity)[] orders)",
  "function getReferees(address referrer) view returns (address[])",
  "function getReferrer(address referee) view returns (address)",
  "function getSellOrdersLength(uint256 marketID) view returns (uint256)",
  "function getTokensInfo(address[] tokenAddresses) view returns ((address tokenAddress, string symbol, uint80 usdMarketID, uint80 minOrderAmount, uint80 minTransferAmount, uint8 decimals, bool isUSD)[])",
  "function getTotalUnclaimedPoints() view returns (uint256)",
  "function getUserPoints(address userAddress) view returns (uint256)",
  "function initialize(address initialOwner)",
  "function isTokenListed(address) view returns (bool)",
  "function listToken(address tokenAddress, uint80 minTransferAmount, uint80 minOrderAmount, uint80 usdMarketID, bool isUSD, bool autoDetect, string manualSymbol, uint8 manualDecimals)",
  "function marketCounter() view returns (uint256)",
  "function marketIDs(bytes32) view returns (uint256)",
  "function markets(uint256) view returns (uint80 price, uint80 lastUpdatePrice, bool isRewardable, address baseAddress, address quoteAddress, address creator, uint256 id, string symbol)",
  "function migrateReferees(bytes32[] proof, address[] referees)",
  "function owner() view returns (address)",
  "function pause()",
  "function paused() view returns (bool)",
  "function placeBuyOrder(uint256 marketId, uint80 price, uint80 quantity, uint256 filledOrderId, uint256[] sellOrderIDs, address referrer)",
  "function placeSellOrder(uint256 marketId, uint80 price, uint80 quantity, uint256 filledOrderId, uint256[] buyOrderIDs, address referrer)",
  "function pointDecimals() pure returns (uint8)",
  "function proxiableUUID() view returns (bytes32)",
  "function refereesOf(address, uint256) view returns (address)",
  "function referralRoot() view returns (bytes32)",
  "function renounceOwnership()",
  "function sellOrders(uint256, uint256) view returns (uint80 userID, uint80 price, uint80 quantity)",
  "function setGeniRewarder(address _rewarder)",
  "function setReferralRoot(bytes32 _referralRoot)",
  "function setReferrer(address _referrer)",
  "function tokens(address) view returns (uint80 minOrderAmount, uint80 minTransferAmount, uint80 usdMarketID, uint8 decimals, bool isUSD, string symbol)",
  "function totalUnclaimedPoints() view returns (uint256)",
  "function transferOwnership(address newOwner)",
  "function unpause()",
  "function updateFeeReceiver(address newAddr)",
  "function updateMarketIsRewardable(uint256 marketId, bool isRewardable)",
  "function updateMinOrderAmount(address tokenAddress, uint80 minOrderAmount)",
  "function updateMinTransferAmount(address tokenAddress, uint80 minTransferAmount)",
  "function updateTokenIsUSD(address tokenAddress, bool isUSD)",
  "function updateUSDMarketID(address tokenAddress, uint80 marketID)",
  "function upgradeToAndCall(address newImplementation, bytes data) payable",
  "function userAddresses(uint80) view returns (address)",
  "function userCounter() view returns (uint80)",
  "function userIDs(address) view returns (uint80)",
  "function userPoints(uint80 userID) view returns (uint256)",
  "function userReferrer(address) view returns (address)",
  "function withdrawEth(uint256 amount)",
  "function withdrawToken(address tokenAddress, uint256 normalizedAmount)"
];