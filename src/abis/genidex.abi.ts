export const geniDexABI = [
  "error AccessManagedInvalidAuthority(address authority)",
  "error AccessManagedRequiredDelay(address caller, uint32 delay)",
  "error AccessManagedUnauthorized(address caller)",
  "error AddressAlreadyLinked()",
  "error EnforcedPause()",
  "error ExpectedPause()",
  "error InvalidAddress()",
  "error InvalidInitialization()",
  "error NotInitializing()",
  "event AuthorityUpdated(address authority)",
  "event FeeReceiverUpdated(address indexed oldAddress, address indexed newAddress)",
  "event GeniRewarderUpdated(address indexed previous, address indexed newRewarder)",
  "event Initialized(uint64 version)",
  "event Paused(address account)",
  "event Unpaused(address account)",
  "function authority() view returns (address)",
  "function isConsumingScheduledOp() view returns (bytes4)",
  "function pause()",
  "function paused() view returns (bool)",
  "function setAuthority(address newAuthority)",
  "function setGeniRewarder(address _rewarder)",
  "function setReferralRoot(bytes32 _referralRoot)",
  "function unpause()",
  "function updateFeeReceiver(address newAddr)",
  "error AmountTooSmall(uint256 amount, uint256 minAmount)",
  "error DecimalsExceedLimit(uint8 decimals)",
  "error InsufficientBalance(uint256 available, uint256 required)",
  "error NoTokensReceived()",
  "error NormalizationOverflow(uint256 amount, uint256 factor)",
  "error ReentrancyGuardReentrantCall()",
  "error SafeERC20FailedOperation(address token)",
  "error TokenNotListed(address token)",
  "error TransferFailed(address from, address to, uint256 amount)",
  "error TransferMismatch(uint256 actual, uint256 expected)",
  "error UserNotFound(address user)",
  "event DebugTransfer(address indexed to, uint256 amount)",
  "event Deposit(address indexed sender, address indexed token, uint256 amount)",
  "event Withdrawal(address indexed recipient, address indexed token, uint256 amount)",
  "function depositEth() payable",
  "function depositToken(address tokenAddress, uint256 normalizedAmount)",
  "function withdrawEth(uint256 amount)",
  "function withdrawToken(address tokenAddress, uint256 normalizedAmount)",
  "error InvalidMarketId(uint256 marketId, uint256 marketCounter)",
  "error OrderAlreadyCanceled(uint256 orderIndex)",
  "error TotalTooSmall(uint256 total, uint256 minimumRequired)",
  "error Unauthorized(uint80 caller, uint80 owner)",
  "event OnCancelBuyOrder(address indexed trader, uint256 indexed marketId, uint256 orderIndex)",
  "event OnPlaceBuyOrder(uint256 indexed marketId, address indexed trader, uint256 orderIndex, uint256 price, uint256 quantity, uint256 remainingQuantity, uint256 lastPrice, address referrer, uint80 userID)",
  "function cancelBuyOrder(uint256 marketId, uint256 orderIndex)",
  "function placeBuyOrder(uint256 marketId, uint80 price, uint80 quantity, uint256 filledOrderId, uint256[] sellOrderIDs, address referrer)",
  "error CannotAddFunctionToDiamondThatAlreadyExists(bytes4 _selector)",
  "error CannotAddSelectorsToZeroAddress(bytes4[] _selectors)",
  "error CannotRemoveFunctionThatDoesNotExist(bytes4 _selector)",
  "error CannotRemoveImmutableFunction(bytes4 _selector)",
  "error CannotReplaceFunctionThatDoesNotExists(bytes4 _selector)",
  "error CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(bytes4 _selector)",
  "error CannotReplaceFunctionsFromFacetWithZeroAddress(bytes4[] _selectors)",
  "error CannotReplaceImmutableFunction(bytes4 _selector)",
  "error IncorrectFacetCutAction(uint8 _action)",
  "error InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata)",
  "error NoBytecodeAtAddress(address _contractAddress, string _message)",
  "error NoSelectorsProvidedForFacetForCut(address _facetAddress)",
  "error RemoveFacetAddressMustBeZeroAddress(address _facetAddress)",
  "event DiamondCut((address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
  "function diamondCut((address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
  "function facetAddress(bytes4 _functionSelector) view returns (address facetAddress_)",
  "function facetAddresses() view returns (address[] facetAddresses_)",
  "function facetFunctionSelectors(address _facet) view returns (bytes4[] _facetFunctionSelectors)",
  "function facets() view returns ((address facetAddress, bytes4[] functionSelectors)[] facets_)",
  "function supportsInterface(bytes4 _interfaceId) view returns (bool)",
  "error MarketAlreadyExists(address baseToken, address quoteToken)",
  "function addMarket(address baseAddress, address quoteAddress)",
  "function generateMarketHash(address baseAddress, address quoteAddress) pure returns (bytes32)",
  "function updateMarketIsRewardable(uint256 marketId, bool isRewardable)",
  "error NotContractOwner(address _user, address _contractOwner)",
  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
  "function owner() view returns (address owner_)",
  "function transferOwnership(address _newOwner)",
  "error InsufficientPoints(uint256 available, uint256 required)",
  "error InvalidProof()",
  "error OnlyRewarderAllowed(address caller)",
  "error ReferralRootNotSet()",
  "error ReferrerAlreadySet(address user)",
  "error SelfReferralNotAllowed(address user)",
  "function deductUserPoints(address userAddress, uint256 pointsToDeduct)",
  "function getTotalUnclaimedPoints() view returns (uint256)",
  "function getUserPoints(address userAddress) view returns (uint256)",
  "function migrateReferees(bytes32[] proof, address[] referees)",
  "function pointDecimals() pure returns (uint8)",
  "function setReferrer(address _referrer)",
  "function getAllMarkets() view returns ((uint80 price, uint80 lastUpdatePrice, bool isRewardable, address baseAddress, address quoteAddress, address creator, uint256 id, string symbol)[])",
  "function getBalance(address account, address tokenOrEtherAddress) view returns (uint256)",
  "function getBuyOrdersLength(uint256 marketID) view returns (uint256)",
  "function getEthBalance() view returns (uint256)",
  "function getFilledOrders(uint8 orderType, uint256 marketID, uint256 limit) view returns (uint256[])",
  "function getMarket(uint256 id) view returns ((uint80 price, uint80 lastUpdatePrice, bool isRewardable, address baseAddress, address quoteAddress, address creator, uint256 id, string symbol))",
  "function getMarketID(address baseAddress, address quoteAddress) view returns (uint256)",
  "function getOrders(uint8 orderType, uint256 marketID, uint256 offset, uint256 limit) view returns ((uint256 id, address trader, uint80 userID, uint80 price, uint80 quantity)[] orders)",
  "function getReader() view returns (address)",
  "function getReferees(address referrer) view returns (address[])",
  "function getReferrer(address referee) view returns (address)",
  "function getSellOrdersLength(uint256 marketID) view returns (uint256)",
  "function getTokensInfo(address[] tokenAddresses) view returns ((address tokenAddress, string symbol, uint80 usdMarketID, uint80 minOrderAmount, uint80 minTransferAmount, uint8 decimals, bool isUSD)[])",
  "function getUserAddress(uint80 userID) view returns (address userAddress)",
  "function getUserID(address userAddress) view returns (uint80 userID)",
  "event OnCancelSellOrder(address indexed trader, uint256 indexed marketId, uint256 orderIndex)",
  "event OnPlaceSellOrder(uint256 indexed marketId, address indexed trader, uint256 orderIndex, uint256 price, uint256 quantity, uint256 remainingQuantity, uint256 lastPrice, address referrer, uint80 userID)",
  "function cancelSellOrder(uint256 marketId, uint256 orderIndex)",
  "function placeSellOrder(uint256 marketId, uint80 price, uint80 quantity, uint256 filledOrderId, uint256[] buyOrderIDs, address referrer)",
  "error DecimalsFetchFailed()",
  "error ManualDecimalsRequired()",
  "error ManualSymbolRequired()",
  "error SymbolFetchFailed()",
  "event TokenListed(address indexed token, string symbol)",
  "function listToken(address tokenAddress, uint80 minTransferAmount, uint80 minOrderAmount, uint80 usdMarketID, bool isUSD, bool autoDetect, string manualSymbol, uint8 manualDecimals)",
  "function updateMinOrderAmount(address tokenAddress, uint80 minOrderAmount)",
  "function updateMinTransferAmount(address tokenAddress, uint80 minTransferAmount)",
  "function updateTokenIsUSD(address tokenAddress, bool isUSD)",
  "function updateUSDMarketID(address tokenAddress, uint80 marketID)"
];